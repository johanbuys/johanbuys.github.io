<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AppBase]]></title>
  <link href="http://blog.appbase.co/atom.xml" rel="self"/>
  <link href="http://blog.appbase.co/"/>
  <updated>2014-04-01T15:34:48+02:00</updated>
  <id>http://blog.appbase.co/</id>
  <author>
    <name><![CDATA[Johan Buys]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Publishing via Git Windows Server 2008 IIS]]></title>
    <link href="http://blog.appbase.co/blog/2014/04/01/setting-up-webpublishing-via-git-windows-server-2008/"/>
    <updated>2014-04-01T14:23:18+02:00</updated>
    <id>http://blog.appbase.co/blog/2014/04/01/setting-up-webpublishing-via-git-windows-server-2008</id>
    <content type="html"><![CDATA[<p>Recently I had to setup a web publishing environment to publish web pages on a live site. Ftp was out of the question seeing as the ports to ftp where blocked on the vps we where using, so I had to use ssh.</p>

<p>Now in retrospect I could have simply used scp or something similar but as always I chose the long and hard road.</p>

<p><strong>Setup the server</strong></p>

<ul>
<li>Set up a new website on the server using the IIS manager.</li>
<li>Choose a local folder to be the document root</li>
<li>Downloaded and Install <a href="http://www.bitvise.com/winsshd" title="Bitvise SSH Server">Bitvise SSH server</a></li>
<li>Downloaded and extract <a href="https://code.google.com/p/msysgit/downloads/detail?name=PortableGit-1.9.0-preview20140217.7z&amp;can=2&amp;q=">Msysgit Protable Git</a> into C:\Git</li>
<li>Add C:\Git\bin and C:\Git\cmd to PATH variable</li>
<li><p>Next Configure the SSH Server</p>

<ul>
<li>I used steps from <a href="http://blog.chronosinteractive.com/posts/using-windows-server-host-git-repository">http://blog.chronosinteractive.com/posts/using-windows-server-host-git-repository</a></li>
<li>Follow the easy setup steps.</li>
<li>Generate an RSA host key

<ul>
<li>Under &ldquo;Host Keys&rdquo; click &ldquo;Manage host keys&rdquo;</li>
<li>Click &ldquo;Generate newâ€¦&rdquo;</li>
<li>Make sure the algorithm is set to &ldquo;rsa&rdquo;</li>
<li>Make sure the size is set to 1024</li>
<li>Check the box to &ldquo;Set as employed keypair for this algorithm&rdquo;</li>
<li>Click &ldquo;Generate&rdquo;</li>
</ul>
</li>
<li>Close out of windows until you arrive again at the main control panel screen</li>
<li>Configure the &ldquo;Everyone&rdquo; group to work with Git.

<ul>
<li>Under &ldquo;Settings&rdquo;, click on &ldquo;Edit advanced settings&rdquo;</li>
<li>Select &ldquo;Windows groups&rdquo; from the tray on the left</li>
<li>Select the &ldquo;Everyone&rdquo; group and click &ldquo;Edit&rdquo;</li>
<li>Set &ldquo;Exec request prefix&rdquo; to cmd.exe /c sh gitcmdhelper.sh (last character must be a space)</li>
<li>Click &ldquo;OK&rdquo;</li>
</ul>
</li>
<li>Create gitcmdhelper.sh

<ul>
<li>Create a new file in C:\Git\bin titled gitcmdhelper.sh Set file contents to: $*</li>
</ul>
</li>
<li>Test the connection.</li>
</ul>
</li>
<li><p>Next Login via ssh from your local machine</p>

<p>   ssh <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#117;&#115;&#x65;&#114;&#64;&#x73;&#101;&#114;&#118;&#101;&#x72;&#46;&#99;&#111;&#109;">&#x75;&#x73;&#101;&#114;&#x40;&#x73;&#x65;&#x72;&#118;&#x65;&#x72;&#x2e;&#99;&#x6f;&#x6d;</a></p></li>
<li><p>Create a Directory where you will have your git repository.</p></li>
</ul>


<blockquote><pre><code>mkdir mywebsite.git 
cd mywebsite.git
</code></pre></blockquote>

<ul>
<li>do a</li>
</ul>


<blockquote><pre><code>git init --bare
</code></pre></blockquote>

<ul>
<li>This will create a &ldquo;Bare&rdquo; Git repo, only the .git content will reside here, don&rsquo;t worry this is how we want it.</li>
<li>Next we will create a hook ( a hook is a set of commands that will run based on some repo actions)</li>
<li>Make sure you are in the repo dir and that there are some folders in there one we will use is aptly named &ldquo;hooks&rdquo;.</li>
<li>do a</li>
</ul>


<blockquote><pre><code>cat &gt; hooks/post-receive
</code></pre></blockquote>

<ul>
<li>and enter the following</li>
</ul>


<blockquote><pre><code>#!/bin/sh
git --work-tree=/path/to/site/web/root checkout -f
</code></pre></blockquote>

<p>Ctrl+c will end input.</p>

<p>Make sure to replace the &ldquo;/path/to/site/web/root&rdquo; with the folder we created in the beginning (where IIS will look for the website)</p>

<p>make the file executable doing a</p>

<pre><code>chmod +x post-receive
</code></pre>

<p><strong>Setup Your Client</strong></p>

<p>On your local machine issue the following</p>

<pre><code>git remote add production git@myserver.com/path/to/mywebsite.git
git push production +master:refs/heads/master
</code></pre>

<p>And when you have changes to push to production simply
do a normal</p>

<pre><code>git push production
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Page Apps]]></title>
    <link href="http://blog.appbase.co/blog/2013/12/24/single-page-apps/"/>
    <updated>2013-12-24T11:16:00+02:00</updated>
    <id>http://blog.appbase.co/blog/2013/12/24/single-page-apps</id>
    <content type="html"><![CDATA[<p>Single Page Apps or SPA&rsquo;s are all the rage and with good reason. About 3 years ago, I started to think about the idea and came to the conclusion that client machines have been putting on some weight in the last couple of years. We could no longer call clients &ldquo;thin&rdquo; and get away with it.</p>

<!-- more -->


<p>Processing power on client machines have been increasing as per <a href="http://en.wikipedia.org/wiki/Moore's_law" target="_blank">Moore&rsquo;s law</a> and the architecture of old is not really relevant anymore.
Client machines are now powerful enough to process data and deal with logic and business rules. Processing can happen on the client without the need to send the entire viewstate to the server for each action. The latencies involved when sending a request to the server for each button press or click on a dropdown degrades the exerience because an entirely &ldquo;fresh&rdquo; page needs to be updated and sent down the wire again.</p>

<p>So that is why I decided to try and roll my own implementation, totaly oblivious to ready made frameworks available to me. My idea was to have the server deal with the data and let the client request actions via ajax calls. The main page could for arguments sake be a static html page with no server side processing what so ever.</p>

<p><img src="http://farm3.staticflickr.com/2250/2179201684_a5fe774379.jpg" title="Spaghetti" alt="alt text" /></p>

<p>My first attempts were a huge mess of spaghetti code, with all sorts of anti-patterns mixed in. Using <a href="http://www.jquery.com" target="_blank">JQuery</a> to update the DOM an do Ajax calls to the backend. As the complexity increased the readability and the maintainability decreased. Anything more than toy projects and &ldquo;hello world&rsquo;s&rdquo; would almost be impossible to fathom.</p>

<p>Then I discovered that people have been having the same problems and had created frameworks and document best practices and even coining SPA as a term. I was in awe of all the possibilities available to me, I tried a few frameworks but did not have the time nor patience to learn colplex api&rsquo;s and frameworks. So after failing to get to grips with the <a href="http://backbonejs.org" target="_blank">backbone.js</a>, syntax I discovered <a href="http://knockoutjs.com" target="_blank">Knockout.js</a> and I had nirvana, albeit only for a short while!</p>

<p>Knockout.js was great it introduced me to the wonderful world of frontend development, it helped me structure my code in controllers and views and MVVM was a great way to separate concerns and it had 2-way data binding.</p>

<p>But once again, I was stuck in a mess of spaghetti! I was starting to lose that in-love feeling, the honeymoon period was drawing to a close. I must confess: the messy code wasn&rsquo;t Knockout&rsquo;s fault it was all my own, but it seemed like a good time to reinvestigate my options.</p>

<p>So I went back and searched yet again to find something that would fit better. Then I discovered <a href="http://angularjs.org" target="_blank">AngularJs</a>. AngularJs is clean, no need to make special objects, it works with plain javascript objects, so you can use JSON sent down directly from the server. I quickly understood the basic syntax of modules, controllers and services. The inline curly braces replacing and templating is easy and intuative.</p>

<p><img src="http://angularjs.org/img/AngularJS-large.png" title="AngularJS!" alt="alt text" /></p>

<p>It&rsquo;s just awesome, I now work with it on a daily basis. My code is more structured, more functional and cleaner.
By using directives I can extend HTML to define my own reusable componets and widgets. You can basically learn HTML new tricks, by adding new tags. The magic Dependency injection provides, makes it easy to use modules anywhere, the injector figures out what you want to use where and automagically adds it in. I love the use of special $scope objects to make the link between controllers and views.</p>

<p>So for me SPA development starts and ends with angular. It&rsquo;s a mature project with a clear direction and focus, it has a large and ever growing community and it&rsquo;s backed and used by Google, need I say more&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In a Galaxy Far, Far Away...]]></title>
    <link href="http://blog.appbase.co/blog/2013/12/24/in-a-galaxy-far/"/>
    <updated>2013-12-24T11:07:00+02:00</updated>
    <id>http://blog.appbase.co/blog/2013/12/24/in-a-galaxy-far</id>
    <content type="html"><![CDATA[<p>Hi and welcome to the first post on my new blog! I finally got around to setting up octopress and so far I have been very much impressed.</p>

<p>I decided to migrate to octopress, because running a wordpress blog started to become more work and time that I was able to sacrifice. It wasn&rsquo;t the writing of posts, but more the trying to optimize the speed and reducing 500 errors on the small VPS I was using. MySql tuning and php object caching all this and for what?</p>

<p>Octopress solves all this, it&rsquo;s static so no need to run a resource heavy database, moreover you don&rsquo;t even have to manage your own server because I will be running this on someone else&rsquo;s server all this for free! You just can&rsquo;t beat that!</p>

<p>Using octopress you can host your blog on GitHub or Heroku both which I use and have free accounts for. So all in all a big win! Stay tuned for more about technology, development and all things me.</p>
]]></content>
  </entry>
  
</feed>
